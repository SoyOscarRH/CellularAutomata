{"ast":null,"code":"const getRules = rules_id => {\n  return (s, i) => {\n    const limit = s.length - 1;\n    const n1 = i === 0 ? limit : i - 1;\n    const n2 = i === limit ? 0 : i + 1;\n    const id = (s[n1] << 2) + (s[i] << 1) + (s[n2] << 0);\n    return rules_id >> id & 1;\n  };\n};\n\nconst getLine = (space, rules_id) => {\n  const rules = getRules(rules_id);\n  return space.map((_, i) => rules(space, i));\n};\n\nexport { getRules, getLine };","map":{"version":3,"sources":["/Users/soyoscarrh/Documents/Projects/cellular-automata/src/automata.ts"],"names":["getRules","rules_id","s","i","limit","length","n1","n2","id","getLine","space","rules","map","_"],"mappings":"AAAA,MAAMA,QAAQ,GAAIC,QAAD,IAAsB;AACrC,SAAO,CAACC,CAAD,EAAmBC,CAAnB,KAAiC;AACtC,UAAMC,KAAK,GAAGF,CAAC,CAACG,MAAF,GAAW,CAAzB;AACA,UAAMC,EAAE,GAAGH,CAAC,KAAK,CAAN,GAAUC,KAAV,GAAkBD,CAAC,GAAG,CAAjC;AACA,UAAMI,EAAE,GAAGJ,CAAC,KAAKC,KAAN,GAAc,CAAd,GAAkBD,CAAC,GAAG,CAAjC;AAEA,UAAMK,EAAE,GAAG,CAACN,CAAC,CAACI,EAAD,CAAD,IAAS,CAAV,KAAgBJ,CAAC,CAACC,CAAD,CAAD,IAAQ,CAAxB,KAA8BD,CAAC,CAACK,EAAD,CAAD,IAAS,CAAvC,CAAX;AACA,WAAQN,QAAQ,IAAIO,EAAb,GAAmB,CAA1B;AACD,GAPD;AAQD,CATD;;AAWA,MAAMC,OAAO,GAAG,CAACC,KAAD,EAAuBT,QAAvB,KAA4C;AAC1D,QAAMU,KAAK,GAAGX,QAAQ,CAACC,QAAD,CAAtB;AACA,SAAOS,KAAK,CAACE,GAAN,CAAU,CAACC,CAAD,EAAIV,CAAJ,KAAUQ,KAAK,CAACD,KAAD,EAAQP,CAAR,CAAzB,CAAP;AACD,CAHD;;AAKA,SAAQH,QAAR,EAAkBS,OAAlB","sourcesContent":["const getRules = (rules_id: number) => {\n  return (s: Array<number>, i: number) => {\n    const limit = s.length - 1;\n    const n1 = i === 0 ? limit : i - 1;\n    const n2 = i === limit ? 0 : i + 1;\n\n    const id = (s[n1] << 2) + (s[i] << 1) + (s[n2] << 0);\n    return (rules_id >> id) & 1;\n  };\n};\n\nconst getLine = (space: Array<number>, rules_id: number) => {\n  const rules = getRules(rules_id);\n  return space.map((_, i) => rules(space, i));\n};\n\nexport {getRules, getLine}"]},"metadata":{},"sourceType":"module"}