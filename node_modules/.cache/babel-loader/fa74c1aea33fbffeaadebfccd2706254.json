{"ast":null,"code":"var _jsxFileName = \"/Users/soyoscarrh/Documents/Projects/cellular-automata/src/App.tsx\";\nimport React, { useEffect, useRef } from \"react\";\nimport styles from \"./App.module.css\";\nconst size = 6;\nconst n = 50;\nconst data = Array(100).map(_ => 0);\ndata[n / 2] = 1;\n\nconst getRules = rules_id => {\n  return (s, i) => {\n    const limit = s.length - 1;\n    const n1 = i === 0 ? limit : i - 1;\n    const n2 = i === limit ? 0 : i + 1;\n    const id = (s[n1] << 2) + (s[i] << 1) + (s[n2] << 0);\n    return rules_id >> id & 1;\n  };\n};\n\nconst getLine = (space, rules_id) => {\n  const rules = getRules(rules_id);\n  return space.map((_, i) => rules(space, i));\n};\n\nconst App = () => {\n  const canvas = useRef(null);\n  useEffect(() => {\n    var _canvas$current;\n\n    const drawer = (_canvas$current = canvas.current) === null || _canvas$current === void 0 ? void 0 : _canvas$current.getContext(\"2d\");\n    if (!drawer) return;\n    drawer.fillStyle = \"white\";\n    let currentLine = 0;\n\n    for (let i = 0, current = 0; i < data.length; ++i) {\n      if (data[i]) drawer.fillRect(current, currentLine, size, size);\n      current += size;\n    }\n  }, []);\n  return React.createElement(\"div\", {\n    className: styles.app,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }, React.createElement(\"main\", {\n    className: styles.appMain,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }, \"Edit \", React.createElement(\"code\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }, \"src/App.js\"), \" and save to reload.\"), React.createElement(\"canvas\", {\n    ref: canvas,\n    width: \"400\",\n    height: \"400\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  })));\n};\n\nexport default App;","map":{"version":3,"sources":["/Users/soyoscarrh/Documents/Projects/cellular-automata/src/App.tsx"],"names":["React","useEffect","useRef","styles","size","n","data","Array","map","_","getRules","rules_id","s","i","limit","length","n1","n2","id","getLine","space","rules","App","canvas","drawer","current","getContext","fillStyle","currentLine","fillRect","app","appMain"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,MAA3B,QAAyC,OAAzC;AACA,OAAOC,MAAP,MAAmB,kBAAnB;AAGA,MAAMC,IAAI,GAAG,CAAb;AACA,MAAMC,CAAC,GAAG,EAAV;AACA,MAAMC,IAAI,GAAGC,KAAK,CAAC,GAAD,CAAL,CAAWC,GAAX,CAAeC,CAAC,IAAI,CAApB,CAAb;AACAH,IAAI,CAACD,CAAC,GAAG,CAAL,CAAJ,GAAc,CAAd;;AAGA,MAAMK,QAAQ,GAAIC,QAAD,IAAsB;AACrC,SAAO,CAACC,CAAD,EAAmBC,CAAnB,KAAiC;AACtC,UAAOC,KAAK,GAAGF,CAAC,CAACG,MAAF,GAAW,CAA1B;AACA,UAAOC,EAAE,GAAGH,CAAC,KAAK,CAAN,GAAUC,KAAV,GAAkBD,CAAC,GAAG,CAAlC;AACA,UAAMI,EAAE,GAAGJ,CAAC,KAAKC,KAAN,GAAc,CAAd,GAAkBD,CAAC,GAAG,CAAjC;AAEA,UAAMK,EAAE,GAAG,CAACN,CAAC,CAACI,EAAD,CAAD,IAAS,CAAV,KAAgBJ,CAAC,CAACC,CAAD,CAAD,IAAQ,CAAxB,KAA8BD,CAAC,CAACK,EAAD,CAAD,IAAS,CAAvC,CAAX;AACA,WAAQN,QAAQ,IAAIO,EAAb,GAAmB,CAA1B;AACD,GAPD;AAQD,CATD;;AAYA,MAAMC,OAAO,GAAG,CAACC,KAAD,EAAuBT,QAAvB,KAA4C;AAC1D,QAAMU,KAAK,GAAGX,QAAQ,CAACC,QAAD,CAAtB;AACA,SAAOS,KAAK,CAACZ,GAAN,CAAU,CAACC,CAAD,EAAII,CAAJ,KAAUQ,KAAK,CAACD,KAAD,EAAQP,CAAR,CAAzB,CAAP;AACD,CAHD;;AAKA,MAAMS,GAAG,GAAG,MAAM;AAChB,QAAMC,MAAM,GAAGrB,MAAM,CAAoB,IAApB,CAArB;AAEAD,EAAAA,SAAS,CAAC,MAAM;AAAA;;AACd,UAAMuB,MAAM,sBAAGD,MAAM,CAACE,OAAV,oDAAG,gBAAgBC,UAAhB,CAA2B,IAA3B,CAAf;AACA,QAAI,CAACF,MAAL,EAAa;AAEbA,IAAAA,MAAM,CAACG,SAAP,GAAmB,OAAnB;AACA,QAAIC,WAAW,GAAG,CAAlB;;AAEA,SAAK,IAAIf,CAAC,GAAG,CAAR,EAAWY,OAAO,GAAG,CAA1B,EAA6BZ,CAAC,GAAGP,IAAI,CAACS,MAAtC,EAA8C,EAAEF,CAAhD,EAAmD;AACjD,UAAIP,IAAI,CAACO,CAAD,CAAR,EAAaW,MAAM,CAACK,QAAP,CAAgBJ,OAAhB,EAAyBG,WAAzB,EAAsCxB,IAAtC,EAA4CA,IAA5C;AACbqB,MAAAA,OAAO,IAAIrB,IAAX;AACD;AACF,GAXQ,EAWN,EAXM,CAAT;AAaA,SACE;AAAK,IAAA,SAAS,EAAED,MAAM,CAAC2B,GAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAM,IAAA,SAAS,EAAE3B,MAAM,CAAC4B,OAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cACO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADP,yBADF,EAKE;AAAQ,IAAA,GAAG,EAAER,MAAb;AAAqB,IAAA,KAAK,EAAC,KAA3B;AAAiC,IAAA,MAAM,EAAC,KAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IALF,CADF,CADF;AAWD,CA3BD;;AA6BA,eAAeD,GAAf","sourcesContent":["import React, { useEffect, useRef } from \"react\";\nimport styles from \"./App.module.css\";\n\n\nconst size = 6;\nconst n = 50\nconst data = Array(100).map(_ => 0);\ndata[n / 2] = 1;\n\n\nconst getRules = (rules_id: number) => {\n  return (s: Array<number>, i: number) => {\n    const  limit = s.length - 1;\n    const  n1 = i === 0 ? limit : i - 1;\n    const n2 = i === limit ? 0 : i + 1;\n\n    const id = (s[n1] << 2) + (s[i] << 1) + (s[n2] << 0);\n    return (rules_id >> id) & 1;\n  };\n}\n\n\nconst getLine = (space: Array<number>, rules_id: number) => {\n  const rules = getRules(rules_id);\n  return space.map((_, i) => rules(space, i));\n}\n\nconst App = () => {\n  const canvas = useRef<HTMLCanvasElement>(null);\n\n  useEffect(() => {\n    const drawer = canvas.current?.getContext(\"2d\");\n    if (!drawer) return;\n\n    drawer.fillStyle = \"white\";\n    let currentLine = 0;\n\n    for (let i = 0, current = 0; i < data.length; ++i) {\n      if (data[i]) drawer.fillRect(current, currentLine, size, size);\n      current += size;\n    }\n  }, []);\n\n  return (\n    <div className={styles.app}>\n      <main className={styles.appMain}>\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n\n        <canvas ref={canvas} width=\"400\" height=\"400\" />\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}