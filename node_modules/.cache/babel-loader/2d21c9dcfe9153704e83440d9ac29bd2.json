{"ast":null,"code":"var _jsxFileName = \"/Users/soyoscarrh/Documents/Projects/cellular-automata/src/App.tsx\";\nimport React, { useEffect, useRef, useState } from \"react\";\nimport styles from \"./App.module.css\";\nimport { getLine } from \"./automata\";\nconst size = 4;\nconst steps = 200;\nconst n = 200;\n\nconst App = () => {\n  const canvas = useRef(null);\n  const [count, setCount] = useState(0);\n  const [size, setSize] = useState(1);\n  const [rule, setRule] = useState(0);\n  useEffect(() => {\n    const data = Array(n).fill(0);\n    data[n / 2] = 1;\n    const current_canvas = canvas.current;\n    const drawer = current_canvas === null || current_canvas === void 0 ? void 0 : current_canvas.getContext(\"2d\");\n    if (!drawer) return;\n    drawer.clearRect(0, 0, current_canvas.width, current_canvas.height);\n    drawer.fillStyle = \"white\";\n\n    for (let step = 0, line = data; step < steps; ++step) {\n      line.forEach((cell, index) => {\n        if (!cell) return;\n        drawer.fillRect(index * size, step * size, size, size);\n      });\n      line = getLine(line, rule);\n    }\n  }, [count]);\n  return React.createElement(\"div\", {\n    className: styles.app,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  }, React.createElement(\"main\", {\n    className: styles.appMain,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  }, \"Cellular Automata\"), React.createElement(\"label\", {\n    htmlFor: \"rule\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  }, \"Rule: \"), React.createElement(\"input\", {\n    id: \"rule\",\n    type: \"number\",\n    min: \"0\",\n    max: \"255\",\n    value: rule,\n    onChange: e => setRule(Number(e.target.value)),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  }), React.createElement(\"label\", {\n    htmlFor: \"size\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  }, \"Size of cell: \"), React.createElement(\"input\", {\n    id: \"size\",\n    type: \"number\",\n    min: \"1\",\n    max: \"10\",\n    value: size,\n    onChange: e => setSize(Number(e.target.value)),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  }), React.createElement(\"button\", {\n    onClick: () => setCount(c => c + 1),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  }, \"Go!\"), React.createElement(\"canvas\", {\n    ref: canvas,\n    width: size * n,\n    height: size * steps,\n    style: {\n      border: \"0.1rem solid rgba(255, 255, 255, .5)\",\n      margin: \"2rem\",\n      padding: 0\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  })));\n};\n\nexport default App;","map":{"version":3,"sources":["/Users/soyoscarrh/Documents/Projects/cellular-automata/src/App.tsx"],"names":["React","useEffect","useRef","useState","styles","getLine","size","steps","n","App","canvas","count","setCount","setSize","rule","setRule","data","Array","fill","current_canvas","current","drawer","getContext","clearRect","width","height","fillStyle","step","line","forEach","cell","index","fillRect","app","appMain","e","Number","target","value","c","border","margin","padding"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\nimport styles from \"./App.module.css\";\n\nimport { getLine, getRules } from \"./automata\";\n\nconst size = 4;\nconst steps = 200;\nconst n = 200;\n\nconst App = () => {\n  const canvas = useRef<HTMLCanvasElement>(null);\n  const [count, setCount] = useState(0);\n  const [size, setSize] = useState(1);\n  const [rule, setRule] = useState(0);\n\n  useEffect(() => {\n    const data = Array(n).fill(0);\n    data[n / 2] = 1;\n\n    const current_canvas = canvas.current;\n    const drawer = current_canvas?.getContext(\"2d\");\n    if (!drawer) return;\n\n    drawer.clearRect(0, 0, current_canvas!.width, current_canvas!.height);\n    drawer.fillStyle = \"white\";\n\n    for (let step = 0, line = data; step < steps; ++step) {\n      line.forEach((cell, index) => {\n        if (!cell) return;\n        drawer.fillRect(index * size, step * size, size, size);\n      });\n\n      line = getLine(line, rule);\n    }\n  }, [count]);\n\n  return (\n    <div className={styles.app}>\n      <main className={styles.appMain}>\n        <p>Cellular Automata</p>\n\n        <label htmlFor=\"rule\">Rule: </label>\n        <input\n          id=\"rule\"\n          type=\"number\"\n          min=\"0\"\n          max=\"255\"\n          value={rule}\n          onChange={e => setRule(Number(e.target.value))}\n        />\n\n        <label htmlFor=\"size\">Size of cell: </label>\n        <input\n          id=\"size\"\n          type=\"number\"\n          min=\"1\"\n          max=\"10\"\n          value={size}\n          onChange={e => setSize(Number(e.target.value))}\n        />\n\n        <button onClick={() => setCount(c => c + 1)}>Go!</button>\n\n        <canvas\n          ref={canvas}\n          width={size * n}\n          height={size * steps}\n          style={{ border: \"0.1rem solid rgba(255, 255, 255, .5)\", margin: \"2rem\" ,padding: 0 }}\n        />\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}