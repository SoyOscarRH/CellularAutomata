{"ast":null,"code":"var _jsxFileName = \"/Users/soyoscarrh/Documents/Projects/cellular-automata/src/App.tsx\";\nimport React, { useEffect, useRef } from \"react\";\nimport styles from \"./App.module.css\";\nimport { getLine } from \"./automata\";\nconst rule = 54;\nconst size = 5;\nconst steps = 200;\nconst n = 200;\nconst data = Array(n);\n\nfor (let i = 0; i < data.length; ++i) data[i] = 0;\n\ndata[n / 2] = 1;\n\nconst App = () => {\n  const canvas = useRef(null);\n  useEffect(() => {\n    var _canvas$current;\n\n    const drawer = (_canvas$current = canvas.current) === null || _canvas$current === void 0 ? void 0 : _canvas$current.getContext(\"2d\");\n    if (!drawer) return;\n    drawer.fillStyle = \"white\";\n\n    for (let lineNum = 0, line = data; lineNum < steps; ++lineNum) {\n      line.forEach((cell, index) => {\n        if (cell) drawer.fillRect(index * size, lineNum * size, size, size);\n      });\n      line = getLine(line, rule);\n    }\n  }, []);\n  return React.createElement(\"div\", {\n    className: styles.app,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32\n    },\n    __self: this\n  }, React.createElement(\"main\", {\n    className: styles.appMain,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34\n    },\n    __self: this\n  }, \"Edit \", React.createElement(\"code\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35\n    },\n    __self: this\n  }, \"src/App.js\"), \" and save to reload.\"), React.createElement(\"canvas\", {\n    ref: canvas,\n    width: size * n,\n    height: size * steps,\n    style: {\n      border: \"solid\",\n      margin: \"2rem\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  })));\n};\n\nexport default App;","map":{"version":3,"sources":["/Users/soyoscarrh/Documents/Projects/cellular-automata/src/App.tsx"],"names":["React","useEffect","useRef","styles","getLine","rule","size","steps","n","data","Array","i","length","App","canvas","drawer","current","getContext","fillStyle","lineNum","line","forEach","cell","index","fillRect","app","appMain","border","margin"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,MAA3B,QAAyC,OAAzC;AACA,OAAOC,MAAP,MAAmB,kBAAnB;AAEA,SAASC,OAAT,QAAkC,YAAlC;AAEA,MAAMC,IAAI,GAAG,EAAb;AACA,MAAMC,IAAI,GAAG,CAAb;AACA,MAAMC,KAAK,GAAG,GAAd;AACA,MAAMC,CAAC,GAAG,GAAV;AACA,MAAMC,IAAI,GAAGC,KAAK,CAACF,CAAD,CAAlB;;AACA,KAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,IAAI,CAACG,MAAzB,EAAiC,EAAED,CAAnC,EAAsCF,IAAI,CAACE,CAAD,CAAJ,GAAU,CAAV;;AACtCF,IAAI,CAACD,CAAC,GAAG,CAAL,CAAJ,GAAc,CAAd;;AAEA,MAAMK,GAAG,GAAG,MAAM;AAChB,QAAMC,MAAM,GAAGZ,MAAM,CAAoB,IAApB,CAArB;AAEAD,EAAAA,SAAS,CAAC,MAAM;AAAA;;AACd,UAAMc,MAAM,sBAAGD,MAAM,CAACE,OAAV,oDAAG,gBAAgBC,UAAhB,CAA2B,IAA3B,CAAf;AACA,QAAI,CAACF,MAAL,EAAa;AAEbA,IAAAA,MAAM,CAACG,SAAP,GAAmB,OAAnB;;AAEA,SAAK,IAAIC,OAAO,GAAG,CAAd,EAAiBC,IAAI,GAAGX,IAA7B,EAAmCU,OAAO,GAAGZ,KAA7C,EAAoD,EAAEY,OAAtD,EAA+D;AAC7DC,MAAAA,IAAI,CAACC,OAAL,CAAa,CAACC,IAAD,EAAOC,KAAP,KAAiB;AAC5B,YAAID,IAAJ,EAAUP,MAAM,CAACS,QAAP,CAAgBD,KAAK,GAAGjB,IAAxB,EAA8Ba,OAAO,GAAGb,IAAxC,EAA8CA,IAA9C,EAAoDA,IAApD;AACX,OAFD;AAGAc,MAAAA,IAAI,GAAGhB,OAAO,CAACgB,IAAD,EAAOf,IAAP,CAAd;AACD;AACF,GAZQ,EAYN,EAZM,CAAT;AAcA,SACE;AAAK,IAAA,SAAS,EAAEF,MAAM,CAACsB,GAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAM,IAAA,SAAS,EAAEtB,MAAM,CAACuB,OAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cACO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADP,yBADF,EAKE;AACE,IAAA,GAAG,EAAEZ,MADP;AAEE,IAAA,KAAK,EAAER,IAAI,GAAGE,CAFhB;AAGE,IAAA,MAAM,EAAEF,IAAI,GAAGC,KAHjB;AAIE,IAAA,KAAK,EAAE;AAAEoB,MAAAA,MAAM,EAAE,OAAV;AAAmBC,MAAAA,MAAM,EAAE;AAA3B,KAJT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IALF,CADF,CADF;AAgBD,CAjCD;;AAmCA,eAAef,GAAf","sourcesContent":["import React, { useEffect, useRef } from \"react\";\nimport styles from \"./App.module.css\";\n\nimport { getLine, getRules } from \"./automata\";\n\nconst rule = 54;\nconst size = 5;\nconst steps = 200;\nconst n = 200;\nconst data = Array(n);\nfor (let i = 0; i < data.length; ++i) data[i] = 0;\ndata[n / 2] = 1;\n\nconst App = () => {\n  const canvas = useRef<HTMLCanvasElement>(null);\n\n  useEffect(() => {\n    const drawer = canvas.current?.getContext(\"2d\");\n    if (!drawer) return;\n\n    drawer.fillStyle = \"white\";\n\n    for (let lineNum = 0, line = data; lineNum < steps; ++lineNum) {\n      line.forEach((cell, index) => {\n        if (cell) drawer.fillRect(index * size, lineNum * size, size, size);\n      });\n      line = getLine(line, rule);\n    }\n  }, []);\n\n  return (\n    <div className={styles.app}>\n      <main className={styles.appMain}>\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n\n        <canvas\n          ref={canvas}\n          width={size * n}\n          height={size * steps}\n          style={{ border: \"solid\", margin: \"2rem\" }}\n        />\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}