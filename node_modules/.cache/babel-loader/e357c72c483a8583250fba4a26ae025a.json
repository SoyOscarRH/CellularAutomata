{"ast":null,"code":"var _jsxFileName = \"/Users/soyoscarrh/Documents/Projects/cellular-automata/src/App.tsx\";\nimport React, { useEffect, useRef, useState } from \"react\";\nimport styles from \"./App.module.css\";\nimport { getLine } from \"./automata\";\nconst rule = 54;\nconst size = 4;\nconst steps = 200;\nconst n = 200;\nconst data = Array(n).fill(0);\ndata[n / 2] = 1;\n\nconst App = () => {\n  const canvas = useRef(null);\n  const [count, setCount] = useState(0);\n  useEffect(() => {\n    var _canvas$current;\n\n    const drawer = (_canvas$current = canvas.current) === null || _canvas$current === void 0 ? void 0 : _canvas$current.getContext(\"2d\");\n    if (!drawer) return;\n    drawer.fillStyle = \"white\";\n\n    for (let step = 0, line = data; step < steps; ++step) {\n      line.forEach((cell, index) => {\n        if (!cell) return;\n        drawer.fillRect(index * size, step * size, size, size);\n      });\n      line = getLine(line, rule);\n    }\n  }, [count]);\n  return React.createElement(\"div\", {\n    className: styles.app,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35\n    },\n    __self: this\n  }, React.createElement(\"main\", {\n    className: styles.appMain,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  }, \"Cellular Automata\"), React.createElement(\"label\", {\n    htmlFor: \"rule\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    },\n    __self: this\n  }, \"Rule: \"), React.createElement(\"input\", {\n    id: \"rule\",\n    type: \"number\",\n    min: \"0\",\n    max: \"255\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  }), React.createElement(\"button\", {\n    onClick: () => count(count + 1),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }), React.createElement(\"canvas\", {\n    ref: canvas,\n    width: size * n,\n    height: size * steps,\n    style: {\n      border: \"solid\",\n      margin: \"2rem\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  })));\n};\n\nexport default App;","map":{"version":3,"sources":["/Users/soyoscarrh/Documents/Projects/cellular-automata/src/App.tsx"],"names":["React","useEffect","useRef","useState","styles","getLine","rule","size","steps","n","data","Array","fill","App","canvas","count","setCount","drawer","current","getContext","fillStyle","step","line","forEach","cell","index","fillRect","app","appMain","border","margin"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,MAA3B,EAAmCC,QAAnC,QAAmD,OAAnD;AACA,OAAOC,MAAP,MAAmB,kBAAnB;AAEA,SAASC,OAAT,QAAkC,YAAlC;AAEA,MAAMC,IAAI,GAAG,EAAb;AACA,MAAMC,IAAI,GAAG,CAAb;AACA,MAAMC,KAAK,GAAG,GAAd;AACA,MAAMC,CAAC,GAAG,GAAV;AACA,MAAMC,IAAI,GAAGC,KAAK,CAACF,CAAD,CAAL,CAASG,IAAT,CAAc,CAAd,CAAb;AACAF,IAAI,CAACD,CAAC,GAAG,CAAL,CAAJ,GAAc,CAAd;;AAEA,MAAMI,GAAG,GAAG,MAAM;AAChB,QAAMC,MAAM,GAAGZ,MAAM,CAAoB,IAApB,CAArB;AACA,QAAM,CAACa,KAAD,EAAQC,QAAR,IAAoBb,QAAQ,CAAC,CAAD,CAAlC;AAEAF,EAAAA,SAAS,CAAC,MAAM;AAAA;;AACd,UAAMgB,MAAM,sBAAGH,MAAM,CAACI,OAAV,oDAAG,gBAAgBC,UAAhB,CAA2B,IAA3B,CAAf;AACA,QAAI,CAACF,MAAL,EAAa;AAEbA,IAAAA,MAAM,CAACG,SAAP,GAAmB,OAAnB;;AAEA,SAAK,IAAIC,IAAI,GAAG,CAAX,EAAcC,IAAI,GAAGZ,IAA1B,EAAgCW,IAAI,GAAGb,KAAvC,EAA8C,EAAEa,IAAhD,EAAsD;AACpDC,MAAAA,IAAI,CAACC,OAAL,CAAa,CAACC,IAAD,EAAOC,KAAP,KAAiB;AAC5B,YAAI,CAACD,IAAL,EAAW;AACXP,QAAAA,MAAM,CAACS,QAAP,CAAgBD,KAAK,GAAGlB,IAAxB,EAA8Bc,IAAI,GAAGd,IAArC,EAA2CA,IAA3C,EAAiDA,IAAjD;AACD,OAHD;AAKAe,MAAAA,IAAI,GAAGjB,OAAO,CAACiB,IAAD,EAAOhB,IAAP,CAAd;AACD;AAEF,GAfQ,EAeN,CAACS,KAAD,CAfM,CAAT;AAiBA,SACE;AAAK,IAAA,SAAS,EAAEX,MAAM,CAACuB,GAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAM,IAAA,SAAS,EAAEvB,MAAM,CAACwB,OAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBADF,EAKE;AAAO,IAAA,OAAO,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cALF,EAME;AAAO,IAAA,EAAE,EAAC,MAAV;AAAiB,IAAA,IAAI,EAAC,QAAtB;AAA+B,IAAA,GAAG,EAAC,GAAnC;AAAuC,IAAA,GAAG,EAAC,KAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IANF,EAQE;AAAQ,IAAA,OAAO,EAAE,MAAMb,KAAK,CAACA,KAAK,GAAG,CAAT,CAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IARF,EAUE;AACE,IAAA,GAAG,EAAED,MADP;AAEE,IAAA,KAAK,EAAEP,IAAI,GAAGE,CAFhB;AAGE,IAAA,MAAM,EAAEF,IAAI,GAAGC,KAHjB;AAIE,IAAA,KAAK,EAAE;AAAEqB,MAAAA,MAAM,EAAE,OAAV;AAAmBC,MAAAA,MAAM,EAAE;AAA3B,KAJT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAVF,CADF,CADF;AAqBD,CA1CD;;AA4CA,eAAejB,GAAf","sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\nimport styles from \"./App.module.css\";\n\nimport { getLine, getRules } from \"./automata\";\n\nconst rule = 54;\nconst size = 4;\nconst steps = 200;\nconst n = 200;\nconst data = Array(n).fill(0);\ndata[n / 2] = 1;\n\nconst App = () => {\n  const canvas = useRef<HTMLCanvasElement>(null);\n  const [count, setCount] = useState(0);\n\n  useEffect(() => {\n    const drawer = canvas.current?.getContext(\"2d\");\n    if (!drawer) return;\n\n    drawer.fillStyle = \"white\";\n\n    for (let step = 0, line = data; step < steps; ++step) {\n      line.forEach((cell, index) => {\n        if (!cell) return;\n        drawer.fillRect(index * size, step * size, size, size);\n      });\n\n      line = getLine(line, rule);\n    }\n\n  }, [count]);\n\n  return (\n    <div className={styles.app}>\n      <main className={styles.appMain}>\n        <p>\n          Cellular Automata\n        </p>\n\n        <label htmlFor=\"rule\">Rule: </label>\n        <input id=\"rule\" type=\"number\" min=\"0\" max=\"255\" />\n\n        <button onClick={() => count(count + 1)} />\n\n        <canvas\n          ref={canvas}\n          width={size * n}\n          height={size * steps}\n          style={{ border: \"solid\", margin: \"2rem\" }}\n        />\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}