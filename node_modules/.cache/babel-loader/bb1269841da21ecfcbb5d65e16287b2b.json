{"ast":null,"code":"var _jsxFileName = \"/Users/soyoscarrh/Documents/Projects/cellular-automata/src/App.tsx\";\nimport React, { useEffect, useRef } from \"react\";\nimport styles from \"./App.module.css\";\nconst rule = 126;\nconst size = 2;\nconst steps = 500;\nconst n = 500;\nconst data = Array(n);\n\nfor (let i = 0; i < data.length; ++i) data[i] = 0;\n\ndata[n / 2] = 1;\n\nconst getRules = rules_id => {\n  return (s, i) => {\n    const limit = s.length - 1;\n    const n1 = i === 0 ? limit : i - 1;\n    const n2 = i === limit ? 0 : i + 1;\n    const id = (s[n1] << 2) + (s[i] << 1) + (s[n2] << 0);\n    return rules_id >> id & 1;\n  };\n};\n\nconst getLine = (space, rules_id) => {\n  const rules = getRules(rules_id);\n  return space.map((_, i) => rules(space, i));\n};\n\nconst App = () => {\n  const canvas = useRef(null);\n  useEffect(() => {\n    var _canvas$current;\n\n    const drawer = (_canvas$current = canvas.current) === null || _canvas$current === void 0 ? void 0 : _canvas$current.getContext(\"2d\");\n    if (!drawer) return;\n    drawer.fillStyle = \"white\";\n    let line = data;\n\n    for (let currentLine = 0; currentLine < steps; ++currentLine) {\n      for (let i = 0, current = 0; i < data.length; ++i) {\n        if (line[i]) drawer.fillRect(current, currentLine * size, size, size);\n        current += size;\n      }\n\n      console.log(line);\n      line = getLine(line, rule);\n    }\n  }, []);\n  return React.createElement(\"div\", {\n    className: styles.app,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  }, React.createElement(\"main\", {\n    className: styles.appMain,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  }, \"Edit \", React.createElement(\"code\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  }, \"src/App.js\"), \" and save to reload.\"), React.createElement(\"canvas\", {\n    ref: canvas,\n    width: size * n,\n    height: size * steps,\n    style: {\n      border: \"solid\",\n      margin: \"2rem\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  })));\n};\n\nexport default App;","map":{"version":3,"sources":["/Users/soyoscarrh/Documents/Projects/cellular-automata/src/App.tsx"],"names":["React","useEffect","useRef","styles","rule","size","steps","n","data","Array","i","length","getRules","rules_id","s","limit","n1","n2","id","getLine","space","rules","map","_","App","canvas","drawer","current","getContext","fillStyle","line","currentLine","fillRect","console","log","app","appMain","border","margin"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,MAA3B,QAAyC,OAAzC;AACA,OAAOC,MAAP,MAAmB,kBAAnB;AAEA,MAAMC,IAAI,GAAG,GAAb;AACA,MAAMC,IAAI,GAAG,CAAb;AACA,MAAMC,KAAK,GAAG,GAAd;AACA,MAAMC,CAAC,GAAG,GAAV;AACA,MAAMC,IAAI,GAAGC,KAAK,CAACF,CAAD,CAAlB;;AACA,KAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,IAAI,CAACG,MAAzB,EAAiC,EAAED,CAAnC,EAAsCF,IAAI,CAACE,CAAD,CAAJ,GAAU,CAAV;;AACtCF,IAAI,CAACD,CAAC,GAAG,CAAL,CAAJ,GAAc,CAAd;;AAEA,MAAMK,QAAQ,GAAIC,QAAD,IAAsB;AACrC,SAAO,CAACC,CAAD,EAAmBJ,CAAnB,KAAiC;AACtC,UAAMK,KAAK,GAAGD,CAAC,CAACH,MAAF,GAAW,CAAzB;AACA,UAAMK,EAAE,GAAGN,CAAC,KAAK,CAAN,GAAUK,KAAV,GAAkBL,CAAC,GAAG,CAAjC;AACA,UAAMO,EAAE,GAAGP,CAAC,KAAKK,KAAN,GAAc,CAAd,GAAkBL,CAAC,GAAG,CAAjC;AAEA,UAAMQ,EAAE,GAAG,CAACJ,CAAC,CAACE,EAAD,CAAD,IAAS,CAAV,KAAgBF,CAAC,CAACJ,CAAD,CAAD,IAAQ,CAAxB,KAA8BI,CAAC,CAACG,EAAD,CAAD,IAAS,CAAvC,CAAX;AACA,WAAQJ,QAAQ,IAAIK,EAAb,GAAmB,CAA1B;AACD,GAPD;AAQD,CATD;;AAWA,MAAMC,OAAO,GAAG,CAACC,KAAD,EAAuBP,QAAvB,KAA4C;AAC1D,QAAMQ,KAAK,GAAGT,QAAQ,CAACC,QAAD,CAAtB;AACA,SAAOO,KAAK,CAACE,GAAN,CAAU,CAACC,CAAD,EAAIb,CAAJ,KAAUW,KAAK,CAACD,KAAD,EAAQV,CAAR,CAAzB,CAAP;AACD,CAHD;;AAKA,MAAMc,GAAG,GAAG,MAAM;AAChB,QAAMC,MAAM,GAAGvB,MAAM,CAAoB,IAApB,CAArB;AAEAD,EAAAA,SAAS,CAAC,MAAM;AAAA;;AACd,UAAMyB,MAAM,sBAAGD,MAAM,CAACE,OAAV,oDAAG,gBAAgBC,UAAhB,CAA2B,IAA3B,CAAf;AACA,QAAI,CAACF,MAAL,EAAa;AAEbA,IAAAA,MAAM,CAACG,SAAP,GAAmB,OAAnB;AAEA,QAAIC,IAAI,GAAGtB,IAAX;;AAEA,SAAK,IAAIuB,WAAW,GAAG,CAAvB,EAA0BA,WAAW,GAAGzB,KAAxC,EAA+C,EAAEyB,WAAjD,EAA8D;AAC5D,WAAK,IAAIrB,CAAC,GAAG,CAAR,EAAWiB,OAAO,GAAG,CAA1B,EAA6BjB,CAAC,GAAGF,IAAI,CAACG,MAAtC,EAA8C,EAAED,CAAhD,EAAmD;AACjD,YAAIoB,IAAI,CAACpB,CAAD,CAAR,EAAagB,MAAM,CAACM,QAAP,CAAgBL,OAAhB,EAAyBI,WAAW,GAAG1B,IAAvC,EAA6CA,IAA7C,EAAmDA,IAAnD;AACbsB,QAAAA,OAAO,IAAItB,IAAX;AACD;;AACD4B,MAAAA,OAAO,CAACC,GAAR,CAAYJ,IAAZ;AACAA,MAAAA,IAAI,GAAGX,OAAO,CAACW,IAAD,EAAO1B,IAAP,CAAd;AACD;AACF,GAhBQ,EAgBN,EAhBM,CAAT;AAkBA,SACE;AAAK,IAAA,SAAS,EAAED,MAAM,CAACgC,GAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAM,IAAA,SAAS,EAAEhC,MAAM,CAACiC,OAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cACO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADP,yBADF,EAKE;AAAQ,IAAA,GAAG,EAAEX,MAAb;AAAqB,IAAA,KAAK,EAAEpB,IAAI,GAAGE,CAAnC;AAAsC,IAAA,MAAM,EAAEF,IAAI,GAAGC,KAArD;AAA4D,IAAA,KAAK,EAAE;AAAC+B,MAAAA,MAAM,EAAE,OAAT;AAAkBC,MAAAA,MAAM,EAAE;AAA1B,KAAnE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IALF,CADF,CADF;AAWD,CAhCD;;AAkCA,eAAed,GAAf","sourcesContent":["import React, { useEffect, useRef } from \"react\";\nimport styles from \"./App.module.css\";\n\nconst rule = 126;\nconst size = 2;\nconst steps = 500;\nconst n = 500;\nconst data = Array(n);\nfor (let i = 0; i < data.length; ++i) data[i] = 0\ndata[n / 2] = 1;\n\nconst getRules = (rules_id: number) => {\n  return (s: Array<number>, i: number) => {\n    const limit = s.length - 1;\n    const n1 = i === 0 ? limit : i - 1;\n    const n2 = i === limit ? 0 : i + 1;\n\n    const id = (s[n1] << 2) + (s[i] << 1) + (s[n2] << 0);\n    return (rules_id >> id) & 1;\n  };\n};\n\nconst getLine = (space: Array<number>, rules_id: number) => {\n  const rules = getRules(rules_id);\n  return space.map((_, i) => rules(space, i));\n};\n\nconst App = () => {\n  const canvas = useRef<HTMLCanvasElement>(null);\n\n  useEffect(() => {\n    const drawer = canvas.current?.getContext(\"2d\");\n    if (!drawer) return;\n\n    drawer.fillStyle = \"white\";\n\n    let line = data;\n\n    for (let currentLine = 0; currentLine < steps; ++currentLine) {\n      for (let i = 0, current = 0; i < data.length; ++i) {\n        if (line[i]) drawer.fillRect(current, currentLine * size, size, size);\n        current += size;\n      }\n      console.log(line)\n      line = getLine(line, rule);\n    }\n  }, []);\n\n  return (\n    <div className={styles.app}>\n      <main className={styles.appMain}>\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n\n        <canvas ref={canvas} width={size * n} height={size * steps} style={{border: \"solid\", margin: \"2rem\"}} />\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}