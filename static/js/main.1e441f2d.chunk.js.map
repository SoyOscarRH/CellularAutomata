{"version":3,"sources":["Components/App/Game.module.css","Components/App/App.module.css","Hooks/useToggle.ts","General/CellularAutomata.ts","General/utils.ts","Hooks/useInput.ts","Components/App/Simple.tsx","Components/App/Advance.tsx","Components/App/index.tsx","index.tsx"],"names":["module","exports","useToggle","initialValue","useState","value","setValue","useCallback","currentValue","CellularAutomata","init","histogram","epoch","data","buffer","getRules","rulesID","index","limit","length","n2","id","this","Uint8Array","ArrayBuffer","ones","i","rule","map","_","total","average","variance","numOfCellsWeCanHave","size","percentageOfWidth","numCells","Math","floor","window","innerWidth","nearest10NumCells","createSimpleBits","Array","doWork","canvas","cellSize","iterations","ruleID","simpleMode","console","log","current_canvas","current","drawer","getContext","automata","clearRect","width","height","fillStyle","n","it","forEach","cell","fillRect","newEpoch","desviation","y","type","opacity","marker","color","name","x","mode","Plotly","newPlot","title","showlegend","drawGraph","sqrt","useInput","bind","onChange","event","String","target","Number","Error","Boolean","App","bindRule","bindSize","cellsInit","bindNCells","changeInit","isVertical","innerHeight","steps","bindSteps","useRef","useEffect","className","styles","segment","container","htmlFor","min","max","step","ref","display","Advance","percentage","bindPercentage","usePercentage","togglePercentage","random","createPercentageBits","propsCanvas","style","backgroundColor","props","intenseButton","onClick","e","file","files","reader","FileReader","readAsText","onload","result","split","borderWidth","analysisData","toggleMode","stylesGame","Game","Simple","stylesApp","app","appMain","DOM_NODE","document","getElementById","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.1e441f2d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"segment\":\"Game_segment__3Uy8-\",\"analysisData\":\"Game_analysisData__blllM\",\"container\":\"Game_container__2Hp8K\",\"display\":\"Game_display__1cKGN\",\"intenseButton\":\"Game_intenseButton__3ntWs\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"App_app__3UCIE\",\"appMain\":\"App_appMain__19oKc\"};","import { useCallback, useState } from \"react\";\n\nconst useToggle = (initialValue: boolean): [boolean, () => void] => {\n  const [value, setValue] = useState(initialValue);\n\n  const toggle = useCallback(() => {\n    setValue(currentValue => !currentValue);\n  }, [setValue]);\n\n  return [value, toggle];\n};\n\nexport {useToggle};\n","type bits = Uint8Array;\n\nclass CellularAutomata {\n  readonly histogram: Array<number>;\n  epoch: number;\n  data: bits;\n  buffer: bits;\n\n  constructor(init: Array<number>) {\n    this.data = new Uint8Array(new ArrayBuffer(init.length));\n    this.buffer = new Uint8Array(new ArrayBuffer(init.length));\n    this.histogram = [];\n    this.epoch = 0;\n\n    let ones = 0;\n    for (let i = 0; i < this.data.length; ++i) {\n      this.data[i] = init[i];\n      if (this.data[i]) ++ones;\n    }\n\n    this.histogram[this.epoch] = ones;\n  }\n\n  newEpoch(rulesID: number): void {\n    this.epoch += 1;\n    let ones = 0;\n\n    const rule = this.getRules(rulesID);\n    for (let i = 0; i < this.buffer.length; ++i) {\n      this.buffer[i] = rule(this.data, i);\n      if (this.buffer[i]) ++ones;\n    }\n\n    this.histogram[this.epoch] = ones;\n    [this.data, this.buffer] = [this.buffer, this.data];\n  }\n\n  createNewEpoch(rulesID: number): bits {\n    const rule = this.getRules(rulesID);\n    return this.data.map((_, i) => rule(this.data, i));\n  }\n\n  getRules = (rulesID: number) => (data: bits, index: number): number => {\n    const limit = data.length - 1;\n    const n1 = index === 0 ? limit : index - 1;\n    const n2 = index === limit ? 0 : index + 1;\n\n    const id = (data[n1] << 2) + (data[index] << 1) + (data[n2] << 0);\n    return (rulesID >> id) & 1;\n  };\n\n  get average(): number {\n    let total = 0;\n    for (let i = 0; i < this.histogram.length; ++i) total += this.histogram[i];\n\n    return total / this.histogram.length;\n  }\n\n  get variance(): number {\n    const average = this.average;\n    let variance = 0;\n\n    for (let i = 0; i < this.histogram.length; ++i)\n      variance += (this.histogram[i] - average) * (this.histogram[i] - average);\n\n    return variance / this.histogram.length;\n  }\n}\n\nexport default CellularAutomata;\n","import CellularAutomata from \"./CellularAutomata\";\n\nconst numOfCellsWeCanHave = (size: number, percentageOfWidth: number = 0.6) => {\n  const numCells = Math.floor((window.innerWidth * percentageOfWidth) / size);\n  const nearest10NumCells = ((numCells - (numCells % 10)) / 10) * 10;\n\n  return nearest10NumCells;\n};\n\nconst createSimpleBits = (numCells: number): Array<number> => {\n  const data = new Array(numCells);\n  for (let i = 0; i < data.length; ++i) data[i] = 0;\n  data[Math.floor(numCells / 2)] = 1;\n\n  return data;\n};\n\nconst createPercentageBits = (\n  numCells: number,\n  percentage: number\n): Array<number> => {\n  const data = new Array(numCells);\n  for (let i = 0; i < data.length; ++i)\n    data[i] = Math.random() < percentage / 100 ? 1 : 0;\n\n  return data;\n};\n\nconst drawGraph = (\n  histogram: Array<number>,\n  average: number,\n  desviation: number\n) => {\n  const trace1 = {\n    y: histogram,\n    type: \"bar\",\n    opacity: 0.6,\n    marker: { color: \"rgb(158,202,225)\" },\n    name: \"Histogram\"\n  };\n\n  const trace2 = {\n    y: [average, average],\n    x: [0, histogram.length - 1],\n    mode: 'lines',\n    opacity: 0.5,\n    marker: { color: \"#FC7A7A\" },\n    name: \"Average\"\n  };\n\n  const trace3 = {\n    y: [average + desviation, average + desviation],\n    x: [0, histogram.length - 1],\n    mode: 'lines',\n    opacity: 0.5,\n    marker: { color: \"#09999\" },\n    name: \"sqrt derivation +\"\n  };\n\n\n  const trace4 = {\n    y: [average - desviation, average - desviation],\n    x: [0, histogram.length - 1],\n    mode: 'lines',\n    opacity: 0.9,\n    marker: { color: \"#09999\" },\n    name: \"sqrt derivation -\"\n  };\n\n\n  const data = [trace1, trace2, trace3, trace4];\n\n  var layout = {\n    title: \"Number of ones\",\n    showlegend: false\n  };\n\n  // @ts-ignore\n  Plotly.newPlot(\"graph\", data, layout);\n};\n\nconst doWork = (\n  canvas: React.RefObject<HTMLCanvasElement>,\n  cellSize: number,\n  iterations: number,\n  ruleID: number,\n  init: Array<number>,\n  simpleMode: boolean\n): CellularAutomata | undefined => {\n  console.log(\"hey\");\n  const current_canvas = canvas.current;\n  const drawer = current_canvas?.getContext(\"2d\");\n  if (!current_canvas || !drawer) return undefined;\n\n  const automata = new CellularAutomata(init);\n\n  drawer.clearRect(0, 0, current_canvas!.width, current_canvas.height);\n  drawer.fillStyle = \"white\";\n\n  const n = cellSize;\n  for (let it = 0; it < iterations; ++it) {\n    automata.data.forEach((cell, index) => {\n      if (cell) drawer.fillRect(index * n, it * n, n, n);\n    });\n\n    automata.newEpoch(ruleID);\n  }\n\n  if (!simpleMode)\n    drawGraph(automata.histogram, automata.average, Math.sqrt(automata.variance));\n\n  return automata;\n};\n\nexport { numOfCellsWeCanHave, doWork, createSimpleBits, createPercentageBits };\n","import { useState, ChangeEvent } from \"react\";\n\ninterface bind<T> {\n  value: T;\n  onChange: (event: ChangeEvent<HTMLInputElement>) => void;\n  type?: string;\n}\n\nconst useInput = <T>(initialValue: T) => {\n  const [value, setValue] = useState(initialValue);\n\n  const bind = {\n    value,\n    onChange: (event: ChangeEvent<HTMLInputElement>) => {\n      if (typeof initialValue === \"string\")\n        setValue((String(event.target.value) as unknown) as T);\n      else if (typeof value === \"number\")\n        setValue((Number(event.target.value) as unknown) as T);\n      else if (typeof value === \"boolean\")\n        setValue((Boolean(event.target.value) as unknown) as T);\n      else throw Error(\"Wrong type at useInput\");\n    },\n    ...(typeof value === \"number\" && { type: \"number\" })\n  };\n\n  return [value, bind] as [T, bind<T>];\n};\n\nexport { useInput };\n","import React, { useEffect, useRef, useState } from \"react\";\nimport styles from \"../App/Game.module.css\";\n\nimport { numOfCellsWeCanHave, createSimpleBits } from \"../../General/utils\";\nimport { doWork } from \"../../General/utils\";\nimport { useInput } from \"../../Hooks/useInput\";\n\nconst App = () => {\n  const [ruleID, bindRule] = useInput(126);\n  const [cellSize, bindSize] = useInput(2);\n\n  const cellsInit = numOfCellsWeCanHave(cellSize);\n  const [numCells, bindNCells] = useInput(cellsInit);\n\n  const [init, changeInit] = useState([] as Array<number>);\n\n  const isVertical = window.innerWidth < window.innerHeight;\n  const stepsInit = isVertical ? 2 * cellsInit : cellsInit;\n  const [steps, bindSteps] = useInput(stepsInit);\n\n  const canvas = useRef<HTMLCanvasElement>(null);\n  const [width, height] = [cellSize * numCells, cellSize * steps];\n\n  useEffect(() => {\n    changeInit(createSimpleBits(numCells));\n  }, [numCells]);\n\n  useEffect(() => {\n    doWork(canvas, cellSize, steps, ruleID, init, true);\n  }, [canvas, cellSize, steps, ruleID, init]);\n\n  return (\n    <section className={styles.segment}>\n      <div className={styles.container}>\n        <label htmlFor=\"ruleID\">Rule: </label>\n        <input id=\"ruleID\" min=\"0\" max=\"255\" {...bindRule} />\n\n        <label htmlFor=\"cellSize\">Size of cell: </label>\n        <input id=\"cellSize\" min=\"1\" max=\"15\" {...bindSize} />\n\n        <label htmlFor=\"nCells\">Number of cells: </label>\n        <input id=\"nCells\" min=\"10\" step=\"10\" max=\"900\" {...bindNCells} />\n\n        <label htmlFor=\"steps\">Iterations: </label>\n        <input id=\"steps\" min=\"10\" step=\"10\" {...bindSteps} />\n      </div>\n\n      <canvas ref={canvas} {...{ width, height, className: styles.display }} />\n    </section>\n  );\n};\n\nexport default App;\n","import React, { useEffect, useRef, useState } from \"react\";\n\nimport CellularAutomata from \"../../General/CellularAutomata\";\n\nimport { numOfCellsWeCanHave, createSimpleBits } from \"../../General/utils\";\nimport { doWork, createPercentageBits } from \"../../General/utils\";\n\nimport { useInput } from \"../../Hooks/useInput\";\nimport { useToggle } from \"../../Hooks/useToggle\";\n\nimport styles from \"./Game.module.css\";\n\nconst Advance: React.FC = () => {\n  const [ruleID, bindRule] = useInput(126);\n  const [cellSize, bindSize] = useInput(2);\n\n  const [percentage, bindPercentage] = useInput(50);\n  const [usePercentage, togglePercentage] = useToggle(true);\n\n  const cellsInit = numOfCellsWeCanHave(cellSize);\n  const [numCells, bindNCells] = useInput(cellsInit);\n\n  const [init, changeInit] = useState([] as Array<number>);\n\n  useEffect(() => {\n    if (usePercentage) changeInit(createPercentageBits(numCells, percentage));\n  }, [numCells, percentage, usePercentage]);\n\n  useEffect(() => {\n    if (!usePercentage) changeInit(createSimpleBits(numCells));\n  }, [numCells, usePercentage]);\n\n  const isVertical = window.innerWidth < window.innerHeight;\n  const stepsInit = isVertical ? 2 * cellsInit : cellsInit;\n  const [steps, bindSteps] = useInput(stepsInit);\n \n  const canvas = useRef<HTMLCanvasElement>(null);\n  const [width, height] = [cellSize * numCells, cellSize * steps];\n  const propsCanvas = { width, height, className: styles.display };\n\n  const automata = useRef<CellularAutomata>();\n\n  const getInit = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const file = e.target.files?.[0];\n    if (!file) return;\n    const reader = new FileReader();\n    reader.readAsText(file);\n\n    reader.onload = e => {\n      const text = e.target?.result as string;\n      let data = text.split(\",\").map(i => Number(i)) as Array<number>;\n      // @ts-ignore\n      bindNCells.onChange({ target: { value: data.length } });\n      changeInit(data);\n    };\n  };\n\n  const backgroundColor = `rgba(255, 255, 255, ${!usePercentage ? 0.7 : 0.1})`;\n  const style = { backgroundColor };\n  const props = { className: styles.intenseButton, style };\n\n  const doIt = () => {\n    doWork(canvas, cellSize, steps, ruleID, init, false);\n  }\n\n  return (\n    <>\n      <section className={styles.segment}>\n        <div className={styles.container}>\n          <label htmlFor=\"ruleID\">Rule: </label>\n          <input id=\"ruleID\" min=\"0\" max=\"255\" {...bindRule} />\n\n          <button onClick={togglePercentage} {...props}>\n            1 at the center {!usePercentage ? \"on\" : \"off\"}\n          </button>\n\n          {usePercentage && (\n            <>\n              <label htmlFor=\"percentage\">Percentage: </label>\n              <input id=\"percentage\" min=\"1\" max=\"100\" {...bindPercentage} />\n            </>\n          )}\n\n          <br />\n\n          <label htmlFor=\"cellSize\">Size of cell: </label>\n          <input id=\"cellSize\" min=\"1\" max=\"15\" {...bindSize} />\n\n          <label htmlFor=\"nCells\">Number of cells: </label>\n          <input id=\"nCells\" min=\"10\" step=\"10\" max=\"900\" {...bindNCells} />\n\n          <label htmlFor=\"steps\">Iterations: </label>\n          <input id=\"steps\" min=\"10\" step=\"10\" {...bindSteps} />\n        </div>\n\n        <div className={styles.container}>\n          <input type=\"file\" id=\"file\" onChange={getInit} />\n          <button onClick={doIt}>Simulate automata</button>\n        </div>\n\n        <canvas ref={canvas} {...propsCanvas} />\n      </section>\n\n      <hr style={{ width: \"80%\", borderWidth: \"0.1rem\" }} />\n\n      <section className={styles.segment}>\n        <h2>Analysis</h2>\n\n        {automata.current && (\n          <div className={styles.analysisData}>\n            <p>Average: {automata.current.average}</p>\n            <p>Variance: {automata.current.variance} </p>\n          </div>\n        )}\n\n        <div id=\"graph\" />\n      </section>\n    </>\n  );\n};\n\nexport default Advance;\n","import React from \"react\";\n\nimport { useToggle } from \"../../Hooks/useToggle\";\n\nimport Simple from \"./Simple\";\nimport Advance from \"./Advance\";\n\nimport stylesApp from \"./App.module.css\";\nimport stylesGame from \"./Game.module.css\";\n\nconst App: React.FC = () => {\n  const [simpleMode, toggleMode] = useToggle(true);\n\n  const style = {backgroundColor: `rgba(255, 255, 255, ${simpleMode ? 0.7 : 0.1})`};\n  const props = { className: stylesGame.intenseButton, style };\n\n  const Game = simpleMode? <Simple /> : <Advance />\n\n  return (\n    <div className={stylesApp.app}>\n      <main className={stylesApp.appMain}>\n        <h2>Cellular Automata</h2>\n\n        <section className={stylesGame.segment}>\n          <div className={stylesGame.container}>\n            <button onClick={toggleMode} {...props}>\n              Simple Mode {simpleMode ? \"on\" : \"off\"}\n            </button>\n          </div>\n        </section>\n\n        {Game}\n\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport \"./index.css\";\nimport App from \"./Components/App\";\n\nconst DOM_NODE = document.getElementById(\"ReactApp\");\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  DOM_NODE\n);\n"],"sourceRoot":""}