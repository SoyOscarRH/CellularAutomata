{"version":3,"sources":["Hooks/useInput.ts","General/CellularAutomata.ts","Components/App/utils.ts","Components/App/index.tsx","Components/App/App.tsx","Hooks/useToggle.ts","index.tsx","Components/App/App.module.css"],"names":["useInput","initialValue","useState","value","setValue","bind","onChange","event","String","target","Number","Error","Boolean","type","CellularAutomata","init","histogram","epoch","data","buffer","getRules","rulesID","index","limit","length","n2","id","this","Uint8Array","ArrayBuffer","ones","i","rule","map","_","total","average","variance","doWork","canvas","cellSize","iterations","ruleID","intenseMode","console","log","current_canvas","current","drawer","getContext","automata","clearRect","width","height","fillStyle","n","it","forEach","cell","fillRect","newEpoch","y","opacity","marker","color","Plotly","newPlot","title","showlegend","drawGraph","App","bindRule","bindSize","cellsInit","size","percentageOfWidth","numCells","Math","floor","window","innerWidth","nearest10NumCells","numOfCellsWeCanHave","bindNCells","changeInit","isVertical","innerHeight","steps","bindSteps","useCallback","currentValue","useToggle","simpleMode","toggleMode","backgroundColor","props","className","styles","intenseButton","style","useRef","propsCanvas","display","useEffect","Array","createBits","script","document","createElement","async","src","body","appendChild","app","appMain","segment","container","onClick","htmlFor","min","max","step","e","file","files","reader","FileReader","readAsText","onload","result","split","ref","visibility","borderWidth","analysisData","DOM_NODE","getElementById","ReactDOM","render","StrictMode","module","exports"],"mappings":"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","file":"static/js/main.f4c3dad2.chunk.js","sourcesContent":["import { useState, ChangeEvent } from \"react\";\n\ninterface bind<T> {\n  value: T;\n  onChange: (event: ChangeEvent<HTMLInputElement>) => void;\n  type?: string;\n}\n\nconst useInput = <T>(initialValue: T) => {\n  const [value, setValue] = useState(initialValue);\n\n  const bind = {\n    value,\n    onChange: (event: ChangeEvent<HTMLInputElement>) => {\n      if (typeof initialValue === \"string\")\n        setValue((String(event.target.value) as unknown) as T);\n      else if (typeof value === \"number\")\n        setValue((Number(event.target.value) as unknown) as T);\n      else if (typeof value === \"boolean\")\n        setValue((Boolean(event.target.value) as unknown) as T);\n      else throw Error(\"Wrong type at useInput\");\n    },\n    ...(typeof value === \"number\" && { type: \"number\" })\n  };\n\n  return [value, bind] as [T, bind<T>];\n};\n\nexport { useInput };\n","type bits = Uint8Array;\n\nclass CellularAutomata {\n  readonly histogram: Array<number>;\n  epoch: number;\n  data: bits;\n  buffer: bits;\n\n  constructor(init: Array<number>) {\n    this.data = new Uint8Array(new ArrayBuffer(init.length));\n    this.buffer = new Uint8Array(new ArrayBuffer(init.length));\n    this.histogram = [];\n    this.epoch = 0;\n\n    let ones = 0;\n    for (let i = 0; i < this.data.length; ++i) {\n      this.data[i] = init[i];\n      if (this.data[i]) ++ones;\n    }\n\n    this.histogram[this.epoch] = ones;\n  }\n\n  newEpoch(rulesID: number): void {\n    this.epoch += 1;\n    let ones = 0;\n\n    const rule = this.getRules(rulesID);\n    for (let i = 0; i < this.buffer.length; ++i) {\n      this.buffer[i] = rule(this.data, i);\n      if (this.buffer[i]) ++ones;\n    }\n\n    this.histogram[this.epoch] = ones;\n    [this.data, this.buffer] = [this.buffer, this.data];\n  }\n\n  createNewEpoch(rulesID: number): bits {\n    const rule = this.getRules(rulesID);\n    return this.data.map((_, i) => rule(this.data, i));\n  }\n\n  getRules = (rulesID: number) => (data: bits, index: number): number => {\n    const limit = data.length - 1;\n    const n1 = index === 0 ? limit : index - 1;\n    const n2 = index === limit ? 0 : index + 1;\n\n    const id = (data[n1] << 2) + (data[index] << 1) + (data[n2] << 0);\n    return (rulesID >> id) & 1;\n  };\n\n  get average(): number {\n    let total = 0;\n    for (let i = 0; i < this.histogram.length; ++i) total += this.histogram[i];\n\n    return total / this.histogram.length;\n  }\n\n  get variance(): number {\n    const average = this.average;\n    let variance = 0;\n\n    for (let i = 0; i < this.histogram.length; ++i)\n      variance += (this.histogram[i] - average) * (this.histogram[i] - average);\n\n    return variance / this.histogram.length;\n  }\n}\n\nexport default CellularAutomata;\n","import CellularAutomata from \"../../General/CellularAutomata\";\n\nconst numOfCellsWeCanHave = (size: number, percentageOfWidth: number = 0.6) => {\n  const numCells = Math.floor((window.innerWidth * percentageOfWidth) / size);\n  const nearest10NumCells = ((numCells - (numCells % 10)) / 10) * 10;\n\n  return nearest10NumCells;\n};\n\nconst createBits = (numCells: number): Array<number> => {\n  const data = new Array(numCells);\n  for (let i = 0; i < data.length; ++i) data[i] = 0;\n  data[Math.floor(numCells / 2)] = 1;\n\n  return data;\n};\n\nconst drawGraph = (histogram: Array<number>) => {\n  const trace = {\n    y: histogram,\n    type: \"bar\",\n    opacity: 0.9,\n    marker: { color: \"rgb(158,202,225)\" }\n  };\n\n  const data = [trace];\n\n  var layout = {\n    title: \"Number of ones\",\n    showlegend: false\n  };\n\n  // @ts-ignore\n  Plotly.newPlot(\"graph\", data, layout);\n};\n\nconst doWork = (\n  canvas: React.RefObject<HTMLCanvasElement>,\n  cellSize: number,\n  iterations: number,\n  ruleID: number,\n  init: Array<number>,\n  intenseMode: boolean\n): CellularAutomata | undefined => {\n  console.log(\"hey\");\n  const current_canvas = canvas.current;\n  const drawer = current_canvas?.getContext(\"2d\");\n  if (!current_canvas || !drawer) return undefined;\n\n  const automata = new CellularAutomata(init);\n\n  drawer.clearRect(0, 0, current_canvas!.width, current_canvas.height);\n  drawer.fillStyle = \"white\";\n\n  const n = cellSize;\n  for (let it = 0; it < iterations; ++it) {\n    automata.data.forEach((cell, index) => {\n      if (cell) drawer.fillRect(index * n, it * n, n, n);\n    });\n\n    automata.newEpoch(ruleID);\n  }\n\n  if (!intenseMode) drawGraph(automata.histogram);\n\n  return automata;\n};\n\nexport { numOfCellsWeCanHave, doWork, createBits };\n","import App from \"./App\"\n\nexport default App","import React, { useEffect, useRef, useState } from \"react\";\nimport styles from \"./App.module.css\";\n\nimport { useInput } from \"../../Hooks/useInput\";\nimport { useToggle } from \"../../Hooks/useToggle\";\nimport { numOfCellsWeCanHave, createBits, doWork } from \"./utils\";\nimport CellularAutomata from \"../../General/CellularAutomata\";\n\nconst App = () => {\n  const [ruleID, bindRule] = useInput(126);\n  const [cellSize, bindSize] = useInput(2);\n\n  const cellsInit = numOfCellsWeCanHave(cellSize);\n  const [numCells, bindNCells] = useInput(cellsInit);\n\n  const [init, changeInit] = useState([] as Array<number>);\n\n  const isVertical = window.innerWidth < window.innerHeight;\n  const stepsInit = isVertical ? 2 * cellsInit : cellsInit;\n  const [steps, bindSteps] = useInput(stepsInit);\n  const [simpleMode, toggleMode] = useToggle(true);\n\n  const backgroundColor = `rgba(255, 255, 255, ${simpleMode ? 0.7 : 0.1})`;\n  const doIt = () => doWork(canvas, cellSize, steps, ruleID, init, simpleMode);\n  const props = { className: styles.intenseButton, style: { backgroundColor } };\n\n  const canvas = useRef<HTMLCanvasElement>(null);\n  const [width, height] = [cellSize * numCells, cellSize * steps];\n  const propsCanvas = { width, height, className: styles.display };\n\n  const automata = useRef<CellularAutomata>();\n\n  useEffect(() => {\n    if (simpleMode) changeInit(createBits(numCells));\n  }, [numCells, simpleMode]);\n\n  useEffect(() => {\n    if (simpleMode) {\n      automata.current = doWork(\n        canvas,\n        cellSize,\n        steps,\n        ruleID,\n        init,\n        simpleMode\n      );\n    }\n  }, [simpleMode, canvas, cellSize, steps, ruleID, init]);\n\n  const getInit = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const file = e.target.files?.[0];\n    if (!file) return;\n    const reader = new FileReader();\n    reader.readAsText(file);\n\n    reader.onload = e => {\n      const text = e.target?.result as string;\n      let data = text.split(\",\").map(i => Number(i)) as Array<number>;\n      // @ts-ignore\n      bindNCells.onChange({ target: { value: data.length } });\n      changeInit(data);\n    };\n  };\n\n  useEffect(() => {\n    if (simpleMode) return;\n\n    const script = document.createElement(\"script\");\n    script.async = true;\n    script.src = \"https://cdn.plot.ly/plotly-latest.min.js\";\n    document.body.appendChild(script);\n  }, [simpleMode]);\n\n  return (\n    <div className={styles.app}>\n      <main className={styles.appMain}>\n        <h2>Cellular Automata</h2>\n\n        <section className={styles.segment}>\n          <div className={styles.container}>\n            <button onClick={toggleMode} {...props}>\n              Simple Mode {simpleMode ? \"on\" : \"off\"}{\" \"}\n            </button>\n          </div>\n\n          <div className={styles.container}>\n            <label htmlFor=\"ruleID\">Rule: </label>\n            <input id=\"ruleID\" min=\"0\" max=\"255\" {...bindRule} />\n\n            <label htmlFor=\"cellSize\">Size of cell: </label>\n            <input id=\"cellSize\" min=\"1\" max=\"15\" {...bindSize} />\n\n            <label htmlFor=\"nCells\">Number of cells: </label>\n            <input id=\"nCells\" min=\"10\" step=\"10\" max=\"900\" {...bindNCells} />\n\n            <label htmlFor=\"steps\">Iterations: </label>\n            <input id=\"steps\" min=\"10\" step=\"10\" {...bindSteps} />\n          </div>\n\n          {!simpleMode && (\n            <div className={styles.container}>\n              <input type=\"file\" id=\"file\" onChange={getInit} />\n              <button onClick={doIt}>Simulate automata</button>\n            </div>\n          )}\n\n          <canvas ref={canvas} {...propsCanvas} />\n        </section>\n\n        <hr style={{ visibility: simpleMode ? \"hidden\" : \"initial\", width: \"80%\", borderWidth: \"0.1rem\" }} />\n\n        <section\n          className={styles.segment}\n          style={{ visibility: simpleMode ? \"hidden\" : \"initial\" }}\n        >\n          <h2>Analysis</h2>\n\n          {automata.current && (\n            <div className={styles.analysisData}>\n              <p>Average: {automata.current.average}</p>\n              <p>Variance: {automata.current.variance} </p>\n            </div>\n          )}\n\n          <div id=\"graph\" />\n        </section>\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import { useCallback, useState } from \"react\";\n\nconst useToggle = (initialValue: boolean): [boolean, () => void] => {\n  const [value, setValue] = useState(initialValue);\n\n  const toggle = useCallback(() => {\n    setValue(currentValue => !currentValue);\n  }, [setValue]);\n\n  return [value, toggle];\n};\n\nexport {useToggle};\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport \"./index.css\";\nimport App from \"./Components/App\";\n\nconst DOM_NODE = document.getElementById(\"ReactApp\");\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  DOM_NODE\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"App_app__3UCIE\",\"appMain\":\"App_appMain__19oKc\",\"segment\":\"App_segment__1PnTC\",\"analysisData\":\"App_analysisData__3OqfA\",\"container\":\"App_container__3twmq\",\"display\":\"App_display__1-wtw\",\"intenseButton\":\"App_intenseButton__wA0VR\"};"],"sourceRoot":""}