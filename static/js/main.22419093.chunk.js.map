{"version":3,"sources":["App.module.css","utils.ts","App.tsx","automata.ts","index.tsx"],"names":["module","exports","getBase","size","base","Math","floor","window","innerWidth","bindIt","setX","e","Number","target","value","App","canvas","useRef","useState","count","setCount","rule","setRule","setSize","innerHeight","x","y","steps","setSteps","n","setN","useEffect","data","Array","fill","current_canvas","current","drawer","getContext","clearRect","width","height","fillStyle","step","line","forEach","cell","index","fillRect","space","rules_id","rules","s","i","limit","length","n2","id","getRules","map","_","getLine","className","styles","app","appMain","htmlFor","type","min","max","onChange","onClick","c","ref","DOM_NODE","document","getElementById","ReactDOM","render"],"mappings":"+GACAA,EAAOC,QAAU,CAAC,IAAM,iBAAiB,QAAU,uB,gKCD7CC,EAAU,SAACC,GACf,IAAMC,EAAOC,KAAKC,MAA2B,GAApBC,OAAOC,WAAoBL,GAGpD,OAFoBC,EAAQA,EAAO,IAAO,GAAM,IAO5CK,EAAS,SAACC,GAAD,OAAkB,SAACC,GAAD,OAAcD,EAAKE,OAAOD,EAAEE,OAAOC,UCqFrDC,EAxFH,WACV,IAAMC,EAASC,iBAA0B,MADzB,EAEUC,mBAAS,GAFnB,mBAETC,EAFS,KAEFC,EAFE,OAGQF,mBAAS,KAHjB,mBAGTG,EAHS,KAGHC,EAHG,OAKQJ,mBAAS,GALjB,mBAKTf,EALS,KAKHoB,EALG,OAOD,CAAChB,OAAOC,WAAYD,OAAOiB,aAAnCC,EAPS,KAONC,EAPM,OAQUR,mBAAShB,EAAQC,IAASsB,EAAIC,EAAI,EAAI,IARhD,mBAQTC,EARS,KAQFC,EARE,OASEV,mBAAShB,EAAQC,IATnB,mBAST0B,EATS,KASNC,EATM,KAiChB,OAtBAC,qBAAU,WACR,IAAMC,EAAOC,MAAMJ,GAAGK,KAAK,GAC3BF,EAAK3B,KAAKC,MAAMuB,EAAI,IAAM,EAE1B,IAAMM,EAAiBnB,EAAOoB,QACxBC,EAAM,OAAGF,QAAH,IAAGA,OAAH,EAAGA,EAAgBG,WAAW,MAC1C,GAAKH,GAAmBE,EAAxB,CAEAA,EAAOE,UAAU,EAAG,EAAGJ,EAAgBK,MAAOL,EAAeM,QAC7DJ,EAAOK,UAAY,QAEnB,IAXc,eAWLC,EAXK,GAYZC,EAAKC,SAAQ,SAACC,EAAMC,GACbD,EACLT,EAAOW,SAASD,EAAQ5C,EAAMwC,EAAOxC,EAAMA,EAAMA,GADjD,OAIFyC,ECvBU,SAACK,EAAsBC,GACrC,IAAMC,EAZS,SAACD,GAChB,OAAO,SAACE,EAAkBC,GACxB,IAAMC,EAAQF,EAAEG,OAAS,EAEnBC,EAAKH,IAAMC,EAAQ,EAAID,EAAI,EAE3BI,GAAML,EAHK,IAANC,EAAUC,EAAQD,EAAI,IAGZ,IAAMD,EAAEC,IAAM,IAAMD,EAAEI,IAAO,GAClD,OAAQN,GAAYO,EAAM,GAKdC,CAASR,GACvB,OAAOD,EAAMU,KAAI,SAACC,EAAGP,GAAJ,OAAUF,EAAMF,EAAOI,MDqB7BQ,CAAQjB,EAAMvB,GAjBT,KAWLsB,EAAO,EAAGC,EAAOZ,EAAMW,EAAOhB,IAASgB,EAAO,EAA9CA,EAAUC,MASlB,CAACzB,IAGF,yBAAK2C,UAAWC,IAAOC,KACrB,0BAAMF,UAAWC,IAAOE,SACtB,iDAEA,2BAAOC,QAAQ,QAAf,UACA,2BACET,GAAG,OACHU,KAAK,SACLC,IAAI,IACJC,IAAI,MACJvD,MAAOO,EACPiD,SAAU7D,EAAOa,KAGnB,2BAAO4C,QAAQ,QAAf,kBACA,2BACET,GAAG,OACHU,KAAK,SACLC,IAAI,IACJC,IAAI,KACJvD,MAAOX,EACPmE,SAAU7D,EAAOc,KAGnB,2BAAO2C,QAAQ,KAAf,qBACA,2BACET,GAAG,IACHU,KAAK,SACLC,IAAI,KACJzB,KAAK,KACL0B,IAAI,MACJvD,MAAOe,EACPyC,SAAU7D,EAAOqB,KAGnB,2BAAOoC,QAAQ,SAAf,gBACA,2BACET,GAAG,QACHU,KAAK,SACLC,IAAI,KACJzB,KAAK,KACL0B,IAAI,MACJvD,MAAOa,EACP2C,SAAU7D,EAAOmB,KAGnB,4BAAQ2C,QAAS,kBAAMnD,GAAS,SAAAoD,GAAC,OAAIA,EAAI,OAAzC,OAEA,4BAAQC,IAAKzD,EAAQwB,MAAOrC,EAAO0B,EAAGY,OAAQtC,EAAOwB,OElFvD+C,EAAWC,SAASC,eAAe,QACzCC,IAASC,OAAO,kBAAC,EAAD,MAASJ,K","file":"static/js/main.22419093.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"App_app__1kX79\",\"appMain\":\"App_appMain__e8_Mi\"};","const getBase = (size: number) => {\n  const base = Math.floor((window.innerWidth * 0.7) / size);\n  const nearest10 = ((base - (base % 10)) / 10) * 10;\n\n  return nearest10;\n};\n\ntype hookFn = React.Dispatch<React.SetStateAction<number>>;\ntype click = React.ChangeEvent<HTMLInputElement>;\nconst bindIt = (setX: hookFn) => (e: click) => setX(Number(e.target.value));\n\n\nexport {getBase, bindIt}","import React, { useEffect, useRef, useState } from \"react\";\nimport styles from \"./App.module.css\";\n\nimport { getLine } from \"./automata\";\nimport { getBase, bindIt } from \"./utils\";\n\nconst App = () => {\n  const canvas = useRef<HTMLCanvasElement>(null);\n  const [count, setCount] = useState(0);\n  const [rule, setRule] = useState(126);\n\n  const [size, setSize] = useState(3);\n\n  const [x, y] = [window.innerWidth, window.innerHeight];\n  const [steps, setSteps] = useState(getBase(size) * (x < y ? 2 : 1));\n  const [n, setN] = useState(getBase(size));\n\n  useEffect(() => {\n    const data = Array(n).fill(0);\n    data[Math.floor(n / 2)] = 1;\n\n    const current_canvas = canvas.current;\n    const drawer = current_canvas?.getContext(\"2d\");\n    if (!current_canvas || !drawer) return;\n\n    drawer.clearRect(0, 0, current_canvas!.width, current_canvas.height);\n    drawer.fillStyle = \"white\";\n\n    for (let step = 0, line = data; step < steps; ++step) {\n      line.forEach((cell, index) => {\n        if (!cell) return;\n        drawer.fillRect(index * size, step * size, size, size);\n      });\n\n      line = getLine(line, rule);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [count]);\n\n  return (\n    <div className={styles.app}>\n      <main className={styles.appMain}>\n        <h2>Cellular Automata</h2>\n\n        <label htmlFor=\"rule\">Rule: </label>\n        <input\n          id=\"rule\"\n          type=\"number\"\n          min=\"0\"\n          max=\"255\"\n          value={rule}\n          onChange={bindIt(setRule)}\n        />\n\n        <label htmlFor=\"size\">Size of cell: </label>\n        <input\n          id=\"size\"\n          type=\"number\"\n          min=\"1\"\n          max=\"10\"\n          value={size}\n          onChange={bindIt(setSize)}\n        />\n\n        <label htmlFor=\"n\">Number of cells: </label>\n        <input\n          id=\"n\"\n          type=\"number\"\n          min=\"10\"\n          step=\"10\"\n          max=\"600\"\n          value={n}\n          onChange={bindIt(setN)}\n        />\n\n        <label htmlFor=\"steps\">Iterations: </label>\n        <input\n          id=\"steps\"\n          type=\"number\"\n          min=\"10\"\n          step=\"10\"\n          max=\"600\"\n          value={steps}\n          onChange={bindIt(setSteps)}\n        />\n\n        <button onClick={() => setCount(c => c + 1)}>Go!</button>\n\n        <canvas ref={canvas} width={size * n} height={size * steps} />\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","const getRules = (rules_id: number) => {\n  return (s: Array<number>, i: number) => {\n    const limit = s.length - 1;\n    const n1 = i === 0 ? limit : i - 1;\n    const n2 = i === limit ? 0 : i + 1;\n\n    const id = (s[n1] << 2) + (s[i] << 1) + (s[n2] << 0);\n    return (rules_id >> id) & 1;\n  };\n};\n\nconst getLine = (space: Array<number>, rules_id: number) => {\n  const rules = getRules(rules_id);\n  return space.map((_, i) => rules(space, i));\n};\n\nexport { getLine };\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport \"./index.css\";\nimport App from \"./App\";\n\nconst DOM_NODE = document.getElementById(\"root\");\nReactDOM.render(<App />, DOM_NODE);\n"],"sourceRoot":""}