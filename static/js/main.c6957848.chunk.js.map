{"version":3,"sources":["Hooks/useInput.ts","General/CellularAutomata.ts","Components/App/utils.ts","Components/App/index.tsx","Components/App/App.tsx","Hooks/useToggle.ts","index.tsx","Components/App/App.module.css"],"names":["useInput","initialValue","useState","value","setValue","bind","onChange","event","String","target","Number","Error","Boolean","type","CellularAutomata","init","histogram","epoch","data","buffer","getRules","rulesID","index","limit","length","n2","id","this","Uint8Array","ArrayBuffer","ones","i","rule","map","_","doWork","canvas","cellSize","iterations","ruleID","intenseMode","current_canvas","current","drawer","getContext","automata","clearRect","width","height","fillStyle","n","it","forEach","cell","fillRect","newEpoch","y","opacity","marker","color","Plotly","newPlot","title","showlegend","drawGraph","App","bindRule","bindSize","cellsInit","size","percentageOfWidth","numCells","Math","floor","window","innerWidth","nearest10NumCells","numOfCellsWeCanHave","bindNCells","changeInit","isVertical","innerHeight","steps","bindSteps","useCallback","currentValue","useToggle","toggleMode","backgroundColor","props","className","styles","intenseButton","style","useRef","propsCanvas","display","useEffect","Array","createBits","app","appMain","container","onClick","htmlFor","min","max","step","e","file","files","reader","FileReader","readAsText","onload","result","split","ref","visibility","DOM_NODE","document","getElementById","ReactDOM","render","StrictMode","module","exports"],"mappings":"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","file":"static/js/main.c6957848.chunk.js","sourcesContent":["import { useState, ChangeEvent } from \"react\";\n\ninterface bind<T> {\n  value: T;\n  onChange: (event: ChangeEvent<HTMLInputElement>) => void;\n  type?: string;\n}\n\nconst useInput = <T>(initialValue: T) => {\n  const [value, setValue] = useState(initialValue);\n\n  const bind = {\n    value,\n    onChange: (event: ChangeEvent<HTMLInputElement>) => {\n      if (typeof initialValue === \"string\")\n        setValue((String(event.target.value) as unknown) as T);\n      else if (typeof value === \"number\")\n        setValue((Number(event.target.value) as unknown) as T);\n      else if (typeof value === \"boolean\")\n        setValue((Boolean(event.target.value) as unknown) as T);\n      else throw Error(\"Wrong type at useInput\");\n    },\n    ...(typeof value === \"number\" && { type: \"number\" })\n  };\n\n  return [value, bind] as [T, bind<T>];\n};\n\nexport { useInput };\n","type bits = Uint8Array;\n\nclass CellularAutomata {\n  readonly histogram: Array<number>;\n  epoch: number;\n\n  data: bits;\n  buffer: bits;\n\n  constructor(init: Array<number>) {\n    this.data = new Uint8Array(new ArrayBuffer(init.length));\n    this.buffer = new Uint8Array(new ArrayBuffer(init.length));\n    this.histogram = [];\n    this.epoch = 0;\n\n    let ones = 0;\n    for (let i = 0; i < this.data.length; ++i) {\n      this.data[i] = init[i];\n      if (this.data[i]) ++ones;\n    }\n\n    this.histogram[this.epoch] = ones;\n  }\n\n  newEpoch(rulesID: number): void {\n    this.epoch += 1;\n    let ones = 0;\n\n    const rule = this.getRules(rulesID);\n    for (let i = 0; i < this.buffer.length; ++i) {\n      this.buffer[i] = rule(this.data, i);\n      if (this.buffer[i]) ++ones;\n    }\n\n    this.histogram[this.epoch] = ones;\n    [this.data, this.buffer] = [this.buffer, this.data];\n  }\n\n  createNewEpoch(rulesID: number): bits {\n    const rule = this.getRules(rulesID);\n    return this.data.map((_, i) => rule(this.data, i));\n  }\n\n  getRules = (rulesID: number) => (data: bits, index: number): number => {\n    const limit = data.length - 1;\n    const n1 = index === 0 ? limit : index - 1;\n    const n2 = index === limit ? 0 : index + 1;\n\n    const id = (data[n1] << 2) + (data[index] << 1) + (data[n2] << 0);\n    return (rulesID >> id) & 1;\n  };\n}\n\nexport default CellularAutomata;\n","import CellularAutomata from \"../../General/CellularAutomata\";\n\nconst numOfCellsWeCanHave = (size: number, percentageOfWidth: number = 0.6) => {\n  const numCells = Math.floor((window.innerWidth * percentageOfWidth) / size);\n  const nearest10NumCells = ((numCells - (numCells % 10)) / 10) * 10;\n\n  return nearest10NumCells;\n};\n\nconst createBits = (numCells: number): Array<number> => {\n  const data = new Array(numCells);\n  for (let i = 0; i < data.length; ++i) data[i] = 0;\n  data[Math.floor(numCells / 2)] = 1;\n\n  return data;\n};\n\nconst drawGraph = (histogram: Array<number>) => {\n  const trace = {\n    y: histogram,\n    type: \"bar\",\n    opacity: 0.9,\n    marker: { color: \"rgb(158,202,225)\" }\n  };\n\n  const data = [trace];\n\n  var layout = {\n    title: \"Number of ones\",\n    showlegend: false\n  };\n\n  // @ts-ignore\n  Plotly.newPlot(\"graph\", data, layout);\n};\n\nconst doWork = (\n  canvas: React.RefObject<HTMLCanvasElement>,\n  cellSize: number,\n  iterations: number,\n  ruleID: number,\n  init: Array<number>,\n  intenseMode: boolean\n): void => {\n  const current_canvas = canvas.current;\n  const drawer = current_canvas?.getContext(\"2d\");\n  if (!current_canvas || !drawer) return;\n\n  const automata = new CellularAutomata(init);\n\n  drawer.clearRect(0, 0, current_canvas!.width, current_canvas.height);\n  drawer.fillStyle = \"white\";\n\n  const n = cellSize;\n  for (let it = 0; it < iterations; ++it) {\n    automata.data.forEach((cell, index) => {\n      if (cell) drawer.fillRect(index * n, it * n, n, n);\n    });\n\n    automata.newEpoch(ruleID);\n  }\n\n  if (!intenseMode) drawGraph(automata.histogram);\n};\n\nexport { numOfCellsWeCanHave, doWork, createBits };\n","import App from \"./App\"\n\nexport default App","import React, { useEffect, useRef, useState } from \"react\";\nimport styles from \"./App.module.css\";\n\nimport { useInput } from \"../../Hooks/useInput\";\nimport { useToggle } from \"../../Hooks/useToggle\";\nimport { numOfCellsWeCanHave, createBits, doWork } from \"./utils\";\n\nconst App = () => {\n  const [ruleID, bindRule] = useInput(126);\n  const [cellSize, bindSize] = useInput(2);\n\n  const cellsInit = numOfCellsWeCanHave(cellSize);\n  const [numCells, bindNCells] = useInput(cellsInit);\n\n  const [init, changeInit] = useState([] as Array<number>);\n\n  const isVertical = window.innerWidth < window.innerHeight;\n  const stepsInit = isVertical ? 2 * cellsInit : cellsInit;\n  const [steps, bindSteps] = useInput(stepsInit);\n  const [intenseMode, toggleMode] = useToggle(!isVertical);\n\n  const backgroundColor = `rgba(255, 255, 255, ${intenseMode ? 0.7 : 0.1})`;\n  const doIt = () => doWork(canvas, cellSize, steps, ruleID, init, intenseMode);\n  const props = { className: styles.intenseButton, style: { backgroundColor } };\n\n  const canvas = useRef<HTMLCanvasElement>(null);\n  const [width, height] = [cellSize * numCells, cellSize * steps];\n  const propsCanvas = { width, height, className: styles.display };\n\n  useEffect(() => {\n    if (intenseMode) changeInit(createBits(numCells));\n  }, [numCells, intenseMode]);\n\n  useEffect(() => {\n    if (intenseMode) doWork(canvas, cellSize, steps, ruleID, init, intenseMode);\n  }, [intenseMode, canvas, cellSize, steps, ruleID, init]);\n\n  const getInit = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const file = e.target.files?.[0];\n    if (!file) return;\n    const reader = new FileReader();\n    reader.readAsText(file);\n\n    reader.onload = e => {\n      const text = e.target?.result as string;\n      let data = text.split(\",\").map(i => Number(i)) as Array<number>;\n      // @ts-ignore\n      bindNCells.onChange({ target: { value: data.length } });\n      changeInit(data);\n    };\n  };\n\n  return (\n    <div className={styles.app}>\n      <main className={styles.appMain}>\n        <h2>Cellular Automata</h2>\n\n        <section className={styles.container}>\n          <button onClick={toggleMode} {...props}>\n            Simple Mode {intenseMode ? \"on\" : \"off\"}{\" \"}\n          </button>\n        </section>\n\n        <section className={styles.container}>\n          <label htmlFor=\"ruleID\">Rule: </label>\n          <input id=\"ruleID\" min=\"0\" max=\"255\" {...bindRule} />\n\n          <label htmlFor=\"cellSize\">Size of cell: </label>\n          <input id=\"cellSize\" min=\"1\" max=\"15\" {...bindSize} />\n\n          <label htmlFor=\"nCells\">Number of cells: </label>\n          <input id=\"nCells\" min=\"10\" step=\"10\" max=\"900\" {...bindNCells} />\n\n          <label htmlFor=\"steps\">Iterations: </label>\n          <input id=\"steps\" min=\"10\" step=\"10\" {...bindSteps} />\n        </section>\n\n        {!intenseMode && (\n          <section className={styles.container}>\n            <input type=\"file\" id=\"file\" onChange={getInit} />\n            <button onClick={doIt}>Simulate automata</button>\n          </section>\n        )}\n\n        <canvas ref={canvas} {...propsCanvas} />\n        <div id=\"graph\" style={{visibility: intenseMode? \"hidden\" : \"initial\"}} />\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import { useCallback, useState } from \"react\";\n\nconst useToggle = (initialValue: boolean): [boolean, () => void] => {\n  const [value, setValue] = useState(initialValue);\n\n  const toggle = useCallback(() => {\n    setValue(currentValue => !currentValue);\n  }, [setValue]);\n\n  return [value, toggle];\n};\n\nexport {useToggle};\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport \"./index.css\";\nimport App from \"./Components/App\";\n\nconst DOM_NODE = document.getElementById(\"root\");\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  DOM_NODE\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"App_app__3UCIE\",\"appMain\":\"App_appMain__19oKc\",\"container\":\"App_container__3twmq\",\"display\":\"App_display__1-wtw\",\"intenseButton\":\"App_intenseButton__wA0VR\"};"],"sourceRoot":""}