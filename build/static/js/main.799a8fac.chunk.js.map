{"version":3,"sources":["App.module.css","App.tsx","automata.ts","index.tsx"],"names":["module","exports","App","canvas","useRef","useState","count","setCount","rule","setRule","size","setSize","steps","setSteps","n","setN","useEffect","data","Array","fill","current_canvas","current","drawer","getContext","clearRect","width","height","fillStyle","step","line","forEach","cell","index","fillRect","space","rules_id","rules","s","i","limit","length","n2","id","getRules","map","_","getLine","className","styles","app","appMain","htmlFor","type","min","max","value","onChange","e","Number","target","onClick","c","ref","style","border","margin","padding","DOM_NODE","document","getElementById","ReactDOM","render"],"mappings":"+GACAA,EAAOC,QAAU,CAAC,IAAM,iBAAiB,QAAU,uB,gKCkGpCC,EA9FH,WACV,IAAMC,EAASC,iBAA0B,MADzB,EAEUC,mBAAS,GAFnB,mBAETC,EAFS,KAEFC,EAFE,OAGQF,mBAAS,KAHjB,mBAGTG,EAHS,KAGHC,EAHG,OAKQJ,mBAAS,GALjB,mBAKTK,EALS,KAKHC,EALG,OAMUN,mBAAS,KANnB,mBAMTO,EANS,KAMFC,EANE,OAOER,mBAAS,KAPX,mBAOTS,EAPS,KAONC,EAPM,KA8BhB,OArBAC,qBAAU,WACR,IAAMC,EAAOC,MAAMJ,GAAGK,KAAK,GAC3BF,EAAKH,EAAI,GAAK,EAEd,IAAMM,EAAiBjB,EAAOkB,QACxBC,EAAM,OAAGF,QAAH,IAAGA,OAAH,EAAGA,EAAgBG,WAAW,MAC1C,GAAKD,EAAL,CAEAA,EAAOE,UAAU,EAAG,EAAGJ,EAAgBK,MAAOL,EAAgBM,QAC9DJ,EAAOK,UAAY,QAEnB,IAXc,eAWLC,EAXK,GAYZC,EAAKC,SAAQ,SAACC,EAAMC,GACbD,EACLT,EAAOW,SAASD,EAAQtB,EAAMkB,EAAOlB,EAAMA,EAAMA,GADjD,OAIFmB,ECpBU,SAACK,EAAsBC,GACrC,IAAMC,EAZS,SAACD,GAChB,OAAO,SAACE,EAAkBC,GACxB,IAAMC,EAAQF,EAAEG,OAAS,EAEnBC,EAAKH,IAAMC,EAAQ,EAAID,EAAI,EAE3BI,GAAML,EAHK,IAANC,EAAUC,EAAQD,EAAI,IAGZ,IAAMD,EAAEC,IAAM,IAAMD,EAAEI,IAAO,GAClD,OAAQN,GAAYO,EAAM,GAKdC,CAASR,GACvB,OAAOD,EAAMU,KAAI,SAACC,EAAGP,GAAJ,OAAUF,EAAMF,EAAOI,MDkB7BQ,CAAQjB,EAAMrB,GAjBT,KAWLoB,EAAO,EAAGC,EAAOZ,EAAMW,EAAOhB,IAASgB,EAAO,EAA9CA,EAAUC,MAQlB,CAACvB,IAGF,yBAAKyC,UAAWC,IAAOC,KACrB,0BAAMF,UAAWC,IAAOE,SACtB,iDAEA,2BAAOC,QAAQ,QAAf,UACA,2BACET,GAAG,OACHU,KAAK,SACLC,IAAI,IACJC,IAAI,MACJC,MAAO/C,EACPgD,SAAU,SAAAC,GAAC,OAAIhD,EAAQiD,OAAOD,EAAEE,OAAOJ,WAGzC,2BAAOJ,QAAQ,QAAf,kBACA,2BACET,GAAG,OACHU,KAAK,SACLC,IAAI,IACJC,IAAI,KACJC,MAAO7C,EACP8C,SAAU,SAAAC,GAAC,OAAI9C,EAAQ+C,OAAOD,EAAEE,OAAOJ,WAGzC,2BAAOJ,QAAQ,KAAf,qBACA,2BACET,GAAG,IACHU,KAAK,SACLC,IAAI,KACJzB,KAAK,KACL0B,IAAI,MACJC,MAAOzC,EACP0C,SAAU,SAAAC,GAAC,OAAI1C,EAAK2C,OAAOD,EAAEE,OAAOJ,WAGtC,2BAAOJ,QAAQ,SAAf,gBACA,2BACET,GAAG,QACHU,KAAK,SACLC,IAAI,KACJzB,KAAK,KACL0B,IAAI,MACJC,MAAO3C,EACP4C,SAAU,SAAAC,GAAC,OAAI5C,EAAS6C,OAAOD,EAAEE,OAAOJ,WAG1C,4BAAQK,QAAS,kBAAMrD,GAAS,SAAAsD,GAAC,OAAIA,EAAI,OAAzC,OAEA,4BACEC,IAAK3D,EACLsB,MAAOf,EAAOI,EACdY,OAAQhB,EAAOE,EACfmD,MAAO,CACLC,OAAQ,uCACRC,OAAQ,OACRC,QAAS,QErFfC,EAAWC,SAASC,eAAe,QACzCC,IAASC,OAAO,kBAAC,EAAD,MAASJ,K","file":"static/js/main.799a8fac.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"App_app__1kX79\",\"appMain\":\"App_appMain__e8_Mi\"};","import React, { useEffect, useRef, useState } from \"react\";\nimport styles from \"./App.module.css\";\n\nimport { getLine } from \"./automata\";\n\nconst App = () => {\n  const canvas = useRef<HTMLCanvasElement>(null);\n  const [count, setCount] = useState(0);\n  const [rule, setRule] = useState(126);\n\n  const [size, setSize] = useState(3);\n  const [steps, setSteps] = useState(300);\n  const [n, setN] = useState(300);\n\n  useEffect(() => {\n    const data = Array(n).fill(0);\n    data[n / 2] = 1;\n\n    const current_canvas = canvas.current;\n    const drawer = current_canvas?.getContext(\"2d\");\n    if (!drawer) return;\n\n    drawer.clearRect(0, 0, current_canvas!.width, current_canvas!.height);\n    drawer.fillStyle = \"white\";\n\n    for (let step = 0, line = data; step < steps; ++step) {\n      line.forEach((cell, index) => {\n        if (!cell) return;\n        drawer.fillRect(index * size, step * size, size, size);\n      });\n\n      line = getLine(line, rule);\n    }\n  }, [count]);\n\n  return (\n    <div className={styles.app}>\n      <main className={styles.appMain}>\n        <h2>Cellular Automata</h2>\n\n        <label htmlFor=\"rule\">Rule: </label>\n        <input\n          id=\"rule\"\n          type=\"number\"\n          min=\"0\"\n          max=\"255\"\n          value={rule}\n          onChange={e => setRule(Number(e.target.value))}\n        />\n\n        <label htmlFor=\"size\">Size of cell: </label>\n        <input\n          id=\"size\"\n          type=\"number\"\n          min=\"1\"\n          max=\"10\"\n          value={size}\n          onChange={e => setSize(Number(e.target.value))}\n        />\n\n        <label htmlFor=\"n\">Number of cells: </label>\n        <input\n          id=\"n\"\n          type=\"number\"\n          min=\"10\"\n          step=\"10\"\n          max=\"600\"\n          value={n}\n          onChange={e => setN(Number(e.target.value))}\n        />\n\n        <label htmlFor=\"steps\">Iterations: </label>\n        <input\n          id=\"steps\"\n          type=\"number\"\n          min=\"10\"\n          step=\"10\"\n          max=\"600\"\n          value={steps}\n          onChange={e => setSteps(Number(e.target.value))}\n        />\n\n        <button onClick={() => setCount(c => c + 1)}>Go!</button>\n\n        <canvas\n          ref={canvas}\n          width={size * n}\n          height={size * steps}\n          style={{\n            border: \"0.1rem solid rgba(255, 255, 255, .5)\",\n            margin: \"2rem\",\n            padding: 0\n          }}\n        />\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","const getRules = (rules_id: number) => {\n  return (s: Array<number>, i: number) => {\n    const limit = s.length - 1;\n    const n1 = i === 0 ? limit : i - 1;\n    const n2 = i === limit ? 0 : i + 1;\n\n    const id = (s[n1] << 2) + (s[i] << 1) + (s[n2] << 0);\n    return (rules_id >> id) & 1;\n  };\n};\n\nconst getLine = (space: Array<number>, rules_id: number) => {\n  const rules = getRules(rules_id);\n  return space.map((_, i) => rules(space, i));\n};\n\nexport { getLine };\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport \"./index.css\";\nimport App from \"./App\";\n\nconst DOM_NODE = document.getElementById(\"root\");\nReactDOM.render(<App />, DOM_NODE);\n"],"sourceRoot":""}